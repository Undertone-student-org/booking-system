name: Lint Codebase
permissions:
  contents: write
  statuses: write 
on:
    workflow_call:
jobs:
  super-linter:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
            fetch-depth: 0
      - name: Run Super-Linter
        uses: super-linter/super-linter@v8
        env:
            VALIDATE_ALL_CODEBASE: true
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            OUTPUT_DETAILS: detailed
            DISABLE_ERRORS: true
            SAVE_SUPER_LINTER_OUTPUT: true
            # -----------------------------
            # CORE ENABLED (for this project)
            # -----------------------------

            # Java backend
            VALIDATE_JAVA: true
            VALIDATE_GOOGLE_JAVA_FORMAT: true

            # Vue frontend
            VALIDATE_VUE: true

            # Config files
            VALIDATE_YAML: true
            VALIDATE_JSON: true
            VALIDATE_DOCKERFILE_HADOLINT: true

            # Security
            VALIDATE_TRIVY: true
            VALIDATE_GITLEAKS: true

            # -----------------------------
            # DISABLED (toggleable if needed)
            # -----------------------------
            VALIDATE_CSS: false                # toggle if CSS becomes relevant
            VALIDATE_CSS_PRETTIER: false       # toggle if you want auto-formatting
            VALIDATE_HTML: false               # toggle if HTML files added
            VALIDATE_HTML_PRETTIER: false      # toggle if HTML formatting desired
            VALIDATE_JAVASCRIPT_ES: false      # toggle if JS linting desired
            VALIDATE_JAVASCRIPT_PRETTIER: false # toggle if JS formatting desired
            VALIDATE_JSCPD: false              # toggle if duplication checking desired
            VALIDATE_MARKDOWN: false           # toggle for docs style checks
            VALIDATE_MARKDOWN_PRETTIER: false  # toggle for docs formatting
            VALIDATE_NATURAL_LANGUAGE: false   # toggle for prose/grammar checking
            VALIDATE_YAML_PRETTIER: false      # toggle for YAML formatting
            VALIDATE_JSON_PRETTIER: false      # toggle for JSON formatting
            VALIDATE_VUE_PRETTIER: false       # toggle for Vue formatting
            VALIDATE_GIT_MERGE_CONFLICT_MARKERS: false # toggle for merge markers check
            VALIDATE_GITHUB_ACTIONS: false     # toggle for Actions workflow lint
            VALIDATE_GITHUB_ACTIONS_ZIZMOR: false # toggle for strict Actions security
            VALIDATE_CHECKOV: false            # toggle for infra/security scanning
            VALIDATE_XML: false                # toggle for XML linting


      - name: Generate Clean Super-Linter Markdown summary
        run: |
          OUTPUT_DIR="super-linter-output/super-linter/"
          MDREPORT="super-linter-report.md"
          echo "# Super-Linter Results" > "$MDREPORT"
          echo "| Linter | Status |" >> "$MDREPORT"
          echo "|--------|--------|" >> "$MDREPORT"
          ERRDETAILS=""
          for codefile in $OUTPUT_DIR/super-linter-parallel-command-exit-code-*; do
            linter=$(basename "$codefile" | sed 's/super-linter-parallel-command-exit-code-//')
            code=$(cat "$codefile")
            if [ "$code" = "0" ]; then
              echo "| $linter | ✅ Passed |" >> "$MDREPORT"
            else
              echo "| $linter | ❌ Failed |" >> "$MDREPORT"
              errfile="$OUTPUT_DIR/super-linter-parallel-stderr-$linter"
              if [ -f "$errfile" ]; then
                ERRDETAILS="$ERRDETAILS
          <details><summary>$linter errors</summary>

          \`\`\`
          $(sed 's/\x1b\[[0-9;]*m//g' "$errfile")
          \`\`\`
          </details>

          "
              fi
            fi
          done
          # Add error details after the table
          echo "$ERRDETAILS" >> "$MDREPORT"
      - name: Insert Super-Linter report into README.md and push
        run: |
          # Insert the linter report between the markers
          awk -v report="$(cat super-linter-report.md)" '
            BEGIN {in_section=0}
            /<!-- SUPER_LINTER_REPORT_START -->/ {print; print report; in_section=1; next}
            /<!-- SUPER_LINTER_REPORT_END -->/ {in_section=0}
            !in_section {print}
          ' README.md > README.new.md
          mv README.new.md README.md

          # Get current branch name
          branch="$(git rev-parse --abbrev-ref HEAD)"

          # Configure git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Add and commit README.md
          git add README.md
          git commit -m "Update Super-Linter report [skip ci]" || echo "No changes to commit"

          # Push logic
          if [ "$branch" = "production" ]; then
            echo "Not pushing to production branch."
          elif [ "$branch" = "pre-production" ]; then
            git push --force
          else
            git push
          fi