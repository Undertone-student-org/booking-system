name: Lint Codebase
permissions:
  contents: write
  statuses: write 
on:
    workflow_call:
jobs:
  super-linter:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
            fetch-depth: 0
      - name: Run Super-Linter
        uses: super-linter/super-linter@v8
        env:
          VALIDATE_ALL_CODEBASE: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OUTPUT_DETAILS: detailed            
          DISABLE_ERRORS: true                
          SAVE_SUPER_LINTER_OUTPUT: true     

          # Enabled linters
          VALIDATE_JAVA: true
          VALIDATE_VUE: true
          VALIDATE_YAML: true
          VALIDATE_JSON: true
          VALIDATE_DOCKERFILE_HADOLINT: true
          VALIDATE_TRIVY: true
          VALIDATE_GITLEAKS: true

          # All other linters 
          #VALIDATE_GOOGLE_JAVA_FORMAT: true
          #VALIDATE_CSS: false
          #VALIDATE_CSS_PRETTIER: false
          #VALIDATE_HTML: false
          #VALIDATE_HTML_PRETTIER: false
          #VALIDATE_JAVASCRIPT_ES: false
          #VALIDATE_JAVASCRIPT_PRETTIER: false
          #VALIDATE_JSCPD: false
          #VALIDATE_MARKDOWN: false
          #VALIDATE_MARKDOWN_PRETTIER: false
          #VALIDATE_NATURAL_LANGUAGE: false
          #VALIDATE_YAML_PRETTIER: false
          #VALIDATE_JSON_PRETTIER: false
          #VALIDATE_VUE_PRETTIER: false
          #VALIDATE_GIT_MERGE_CONFLICT_MARKERS: false
          #VALIDATE_GITHUB_ACTIONS: false
          #VALIDATE_GITHUB_ACTIONS_ZIZMOR: false
          #VALIDATE_CHECKOV: false
          #VALIDATE_XML: false


      - name: Generate Detailed Super-Linter Markdown summary
        run: |
          OUTPUT_DIR="super-linter-output/super-linter/"
          MDREPORT="super-linter-report.md"
          echo "# Super-Linter Results" > "$MDREPORT"
          echo "| Linter | Status |" >> "$MDREPORT"
          echo "|--------|--------|" >> "$MDREPORT"
          ERRDETAILS=""
          for codefile in $OUTPUT_DIR/super-linter-parallel-command-exit-code-*; do
            linter=$(basename "$codefile" | sed 's/super-linter-parallel-command-exit-code-//')
            code=$(cat "$codefile")
            status_emoji=$([ "$code" = "0" ] && echo "✅" || echo "❌")
            status_text=$([ "$code" = "0" ] && echo "Passed" || echo "Failed")
            echo "| $linter | $status_emoji $status_text |" >> "$MDREPORT"
            # Details header with emoji
            details="<details><summary>$status_emoji $linter details</summary>\n"
            stdoutfile="$OUTPUT_DIR/super-linter-parallel-stdout-$linter"
            stderrfile="$OUTPUT_DIR/super-linter-parallel-stderr-$linter"
            if [ -f "$stdoutfile" ]; then
              details="$details\n**Stdout:**\n\`\`\`\n$(sed 's/\x1b\[[0-9;]*m//g' "$stdoutfile")\n\`\`\`\n"
            fi
            if [ -f "$stderrfile" ]; then
              details="$details\n**Stderr:**\n\`\`\`\n$(sed 's/\x1b\[[0-9;]*m//g' "$stderrfile")\n\`\`\`\n"
            fi
            details="$details</details>\n"
            ERRDETAILS="$ERRDETAILS$details"
          done
          echo -e "$ERRDETAILS" >> "$MDREPORT"
      - name: Insert Super-Linter report into README.md and push
        run: |
          # Insert the linter report between the markers
          awk -v report="$(cat super-linter-report.md)" '
            BEGIN {in_section=0}
            /<!-- SUPER_LINTER_REPORT_START -->/ {print; print report; in_section=1; next}
            /<!-- SUPER_LINTER_REPORT_END -->/ {in_section=0}
            !in_section {print}
          ' README.md > README.new.md
          mv README.new.md README.md

          # Get current branch name
          branch="$(git rev-parse --abbrev-ref HEAD)"

          # Configure git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Add and commit README.md
          git add README.md
          git commit -m "Update Super-Linter report [skip ci]" || echo "No changes to commit"

          # Push logic
          if [ "$branch" = "production" ]; then
            echo "Not pushing to production branch."
          elif [ "$branch" = "pre-production" ]; then
            git push --force
          else
            git push
          fi